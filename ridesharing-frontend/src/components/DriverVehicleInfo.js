import React, { useState, useEffect } from 'react';

function DriverVehicleInfo() {
  const [vehicles, setVehicles] = useState([]);
  const [selectedVehicle, setSelectedVehicle] = useState(null);
  const [showUpdateForm, setShowUpdateForm] = useState(false);
  const [updateData, setUpdateData] = useState({
    status: '',
    notes: ''
  });

  function getUser() {
    try {
      return JSON.parse(localStorage.getItem('user'));
    } catch {
      return null;
    }
  }

  const user = getUser();

  useEffect(() => {
    if (user && user.id) {
      fetchAssignedVehicles();
    }
  }, [user]);

  const fetchAssignedVehicles = async () => {
    try {
      const response = await fetch(`/api/driver/vehicles/${user.id}`);
      if (response.ok) {
        const data = await response.json();
        setVehicles(data);
      }
    } catch (error) {
      console.error('L·ªói khi t·∫£i ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c ph√¢n c√¥ng:', error);
    }
  };

  const handleStatusUpdate = async (e) => {
    e.preventDefault();
    if (!selectedVehicle) return;

    try {
      const response = await fetch(`/api/driver/vehicles/${user.id}/vehicle/${selectedVehicle.id}/status`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: updateData.status })
      });

      if (response.ok) {
        setShowUpdateForm(false);
        setSelectedVehicle(null);
        setUpdateData({ status: '', notes: '' });
        fetchAssignedVehicles();
      }
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', error);
    }
  };

  const handleNotesUpdate = async (e) => {
    e.preventDefault();
    if (!selectedVehicle) return;

    try {
      const response = await fetch(`/api/driver/vehicles/${user.id}/vehicle/${selectedVehicle.id}/notes`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ notes: updateData.notes })
      });

      if (response.ok) {
        setShowUpdateForm(false);
        setSelectedVehicle(null);
        setUpdateData({ status: '', notes: '' });
        fetchAssignedVehicles();
      }
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t ghi ch√∫:', error);
    }
  };

  const handleUpdateClick = (vehicle, type) => {
    setSelectedVehicle(vehicle);
    setUpdateData({
      status: vehicle.status,
      notes: vehicle.notes || ''
    });
    setShowUpdateForm(true);
  };

  const getStatusBadge = (status) => {
    const statusMap = {
      'ACTIVE': { text: '‚úÖ ƒêang ho·∫°t ƒë·ªông', class: 'badge bg-success' },
      'MAINTENANCE': { text: 'üîß B·∫£o tr√¨', class: 'badge bg-warning' },
      'BROKEN': { text: '‚ùå H·ªèng', class: 'badge bg-danger' }
    };
    const statusInfo = statusMap[status] || { text: status, class: 'badge bg-secondary' };
    return <span className={statusInfo.class}>{statusInfo.text}</span>;
  };

  const getStatusText = (status) => {
    const statusMap = {
      'ACTIVE': 'ƒêang ho·∫°t ƒë·ªông',
      'MAINTENANCE': 'B·∫£o tr√¨',
      'BROKEN': 'H·ªèng'
    };
    return statusMap[status] || status;
  };

  if (!user) {
    return <div className="alert alert-warning">Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin ph∆∞∆°ng ti·ªán.</div>;
  }

  return (
    <center>
    <div className="container mt-4">
      <h2>Th√¥ng tin ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c ph√¢n c√¥ng</h2>
      <h4>Xin ch√†o, {user.name}!</h4>

      {vehicles.length === 0 ? (
        <div className="alert alert-info">
          B·∫°n ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng ph∆∞∆°ng ti·ªán n√†o. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c ph√¢n c√¥ng.
        </div>
      ) : (
        <div className="row">
          {vehicles.map(vehicle => (
            <div key={vehicle.id} className="col-md-6 mb-4">
              <div className="card">
                <div className="card-header">
                  <h5 className="card-title mb-0">
                    {vehicle.vehicleCode} - {vehicle.licensePlate}
                  </h5>
                </div>
                <div className="card-body">
                  <div className="row">
                    <div className="col-md-6">
                      <p><strong>M√£ xe:</strong> {vehicle.vehicleCode}</p>
                      <p><strong>Bi·ªÉn s·ªë:</strong> {vehicle.licensePlate}</p>
                      <p><strong>S·ª©c ch·ª©a:</strong> {vehicle.seats} gh·∫ø</p>
                      <p><strong>Lo·∫°i xe:</strong> {vehicle.type}</p>
                    </div>
                    <div className="col-md-6">
                      <p><strong>Tr·∫°ng th√°i hi·ªán t·∫°i:</strong></p>
                      <p>{getStatusBadge(vehicle.status)}</p>
                      <p><strong>Ghi ch√∫:</strong></p>
                      <p>{vehicle.notes || 'Kh√¥ng c√≥ ghi ch√∫'}</p>
                    </div>
                  </div>
                  
                  <div className="mt-3">
                    <button 
                      className="btn btn-info btn-sm"
                      onClick={() => handleUpdateClick(vehicle, 'notes')}
                    >
                      üìù C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† th√¥ng tin ph∆∞∆°ng ti·ªán
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Form c·∫≠p nh·∫≠t tr·∫°ng th√°i */}
      {showUpdateForm && selectedVehicle && (
        <center><div className="modal fade show" style={{ display: 'block' }} tabIndex="-1">
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">C·∫≠p nh·∫≠t th√¥ng tin ph∆∞∆°ng ti·ªán</h5>
                <button 
                  type="button" 
                  className="btn-close"
                  onClick={() => {
                    setShowUpdateForm(false);
                    setSelectedVehicle(null);
                    setUpdateData({ status: '', notes: '' });
                  }}
                ></button>
              </div>
              <div className="modal-body">
                <form onSubmit={handleStatusUpdate}>
                  <div className="mb-3">
                    <label className="form-label">Tr·∫°ng th√°i ph∆∞∆°ng ti·ªán:</label>
                    <select
                      className="form-control"
                      value={updateData.status}
                      onChange={(e) => setUpdateData({...updateData, status: e.target.value})}
                      required
                    >
                      <option value="ACTIVE">‚úÖ ƒêang ho·∫°t ƒë·ªông</option>
                      <option value="MAINTENANCE">üîß B·∫£o tr√¨</option>
                      <option value="BROKEN">‚ùå H·ªèng</option>
                    </select>
                  </div>
                  <div className="d-flex gap-2">
                    <button type="submit" className="btn btn-primary">
                      C·∫≠p nh·∫≠t tr·∫°ng th√°i
                    </button>
                    <button 
                      type="button" 
                      className="btn btn-secondary"
                      onClick={() => {
                        setShowUpdateForm(false);
                        setSelectedVehicle(null);
                        setUpdateData({ status: '', notes: '' });
                      }}
                    >
                      H·ªßy
                    </button>
                  </div>
                </form>

                <hr />

                <form onSubmit={handleNotesUpdate}>
                  <div className="mb-3">
                    <label className="form-label">Ghi ch√∫:</label>
                    <textarea
                      className="form-control"
                      rows="3"
                      value={updateData.notes}
                      onChange={(e) => setUpdateData({...updateData, notes: e.target.value})}
                      placeholder="Nh·∫≠p ghi ch√∫ v·ªÅ t√¨nh tr·∫°ng ph∆∞∆°ng ti·ªán..."
                    ></textarea>
                  </div>
                  <div className="d-flex gap-2">
                    <button type="submit" className="btn btn-info">
                      C·∫≠p nh·∫≠t ghi ch√∫
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div></center>
      )}

      {/* Overlay cho modal */}
      {showUpdateForm && (
        <div className="modal-backdrop fade show"></div>
      )}
    </div></center>
  );
}

export default DriverVehicleInfo; 